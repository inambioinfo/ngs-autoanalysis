################################################################################
### SERVER AND PIPELINES REPLACEMENT WORK - Oct-2014
################################################################################

- bcl2fastq to run locally on the server itself, not on the cluster anymore
- architecture slightly different: two volumes /processing/ & /staging/ containing all runs
- 4 new processing servers : sol-srv001/2/3/4 with /lustre/ mounted for processing alignment pipeline

Scripts currently in used:
- manageglsevents.py [ready to be moved to new server - working with new lims server already]
- updaterunstatus.py [to be retired]
- sync.py [to be retired]
- deleterun.py [to be upgraded to cleanprocessing.py]
- autoassignsamples.py [ready to be moved to new server]
- autoanalysis.py [ready and has been running in crontab over test runs]
- cleanlustre.py [to be upgraded]


PROCESSING SERVERS (sol01/2/5):
### run events synchronisation to lims
*/5 * * * * /home/mib-cri/cronwrapper_new.sh /home/mib-cri/bin/python /home/mib-cri/bin/auto-manageglsevents.py --server sol02 --volumes solexa01 solexa02 solexa03 --logfile=/lustre/mib-cri/solexa/Logs/manageglsevents_sol02.log > /dev/null 2>&1

### update run status in run folder by adding Sequencing.failed or Sequencing.completed
*/15 * * * * /home/mib-cri/cronwrapper_new.sh /home/mib-cri/bin/python /home/mib-cri/bin/auto-updaterunstatus.py --basedir=/solexa0[1-3]/data/Runs/ --logfile=/lustre/mib-cri/solexa/Logs/updaterunstatus_sol02.log >/dev/null 2>&1

### run folder synchronisation to lustre
*/30 * * * * /home/mib-cri/cronwrapper_new.sh /home/mib-cri/bin/python /home/mib-cri/bin/auto-sync.py --basedir=/solexa0[1-3]/data/Runs/ --lustredir=/lustre/mib-cri/solexa/Runs/ --logfile=/lustre/mib-cri/solexa/Logs/sync_sol02.log >/dev/null 2>&1

### cleaning up old runs
00 01 * * * /home/mib-cri/cronwrapper_new.sh /home/mib-cri/bin/python /home/mib-cri/bin/auto-deleterun.py --basedir=/solexa0[1-3]/data/Runs --logfile=/lustre/mib-cri/solexa/Logs/deleterun_sol02.log >/dev/null 2>&1
00 00 * * * find /solexa0?/data/Runs/OldRuns/. -maxdepth 1 -mtime +200 -type d -exec rm -rf {} \; > /solexa01/data/Runs/OldRuns/deleteoldruns.out 2>&1


STAGING SERVER (sol03):
### Auto-asign samples to workflow with email notification to genomics core for MiSeq Express samples
00 07,12,14,16 * * * /home/mib-cri/cronwrapper_new.sh /home/mib-cri/bin/python /home/mib-cri/bin/auto-autoassignsamples.py --logfile=/lustre/mib-cri/solexa/Logs/autoassignsamples.log --update --updatesamples --email > /dev/null 2>&1

### autoanalysis 1.5 with new data delivery and new ftp structure
*/20 * * * * /home/mib-cri/cronwrapper_new.sh /home/mib-cri/bin/python /home/mib-cri/bin/auto-autoanalysis.py --basedir=/lustre/mib-cri/solexa/Runs/ --archivedir=/solexa0[1-6]/data/Runs/ --softdir=/home/mib-cri/software/core-pipelines/ --cluster=uk-cri-lcst01 --logfile=/lustre/mib-cri/solexa/Logs/autoanalysis.log >/dev/null 2>&1

### Clean up lustre
05 * * * * /home/mib-cri/cronwrapper_new.sh /home/mib-cri/bin/python /home/mib-cri/bin/auto-cleanlustre.py --basedir=/lustre/mib-cri/solexa/Runs/ --trashdir=/lustre/mib-cri/solexa/TrashRuns/ --logfile=/lustre/mib-cri/solexa/Logs/cleanlustre.log >/dev/null 2>&1

################################################################################
### DOCUMENTATION
################################################################################

This package automatised the creation of the run-meta.xml needed for the pipeline
to run; runs the pipeline; synchronises the data back to the archive; (publishes
external data onto the ftp server;).
The list of runs is obtained from the file system.

These scripts have been made firstly to replace the old Perl solexa_autoanalysis.pl
written by Kevin Howe and modified by Ben Davis mainly because all steps of the
sequencing pipeline have been standardised and are now using the workflow engine
written by Richard Bowers.

1. sequencing servers: uk-cri-lsol02 & uk-cri-lsol05
--------------------------------------------------------------------------------
- updaterunstatus.py - to create Sequencing.completed
python setrunstatus.py --basedir=/solexa0[1-3]/data/Runs --debug

- sync.py - to copy data to lustre
/home/mib-cri/bin/python /home/mib-cri/bin/sync.py --basedir=/solexa0[1-3]/data/Runs --lustredir=/lustre/mib-cri/solexa/Runs --logfile=/lustre/mib-cri/solexa/Runs/sync_sol02.log --debug

- deleterun.py - to delete old runs and move them to OldRuns
/home/mib-cri/bin/python /home/mib-cri/bin/deleterun.py --basedir=/solexa0[1-3]/data/Runs/ --logfile=/lustre/mib-cri/solexa/Runs/deleterun_sol02.log --debug


2. running the sequencing pipeline on the cluster from uk-cri-lsol03
--------------------------------------------------------------------------------
- autoanalysis.py - to automatically run the different steps of the sequencing pipeline and rsync them to archive
/home/mib-cri/bin/python /home/mib-cri/bin/autoanalysis.py --basedir=/lustre/mib-cri/solexa/Runs/ --archivedir=/solexa0[1-6]/data/Runs --cluster=uk-cri-lcst01 --logfile=/lustre/mib-cri/solexa/Runs/autoanalysis.log --debug

- cleanlustre.py - to clean runs after processing on lustre
/home/mib-cri/bin/python /home/mib-cri/bin/cleanlustre.py --basedir=/lustre/mib-cri/solexa/Runs --trashdir=/lustre/mib-cri/solexa/TrashRuns --logfile=/lustre/mib-cri/solexa/Runs/cleanlustre.log --debug

################################################################################
### TESTING
################################################################################
> python -m unittest --verbose autoanalysis.data
> python -m unittest --verbose autoanalysis.pipelines
> python -m unittest --verbose autoanalysis.glslims
### Before testing against the limsdev you need a 'unittest' user and a 'Python Unit Tests' project
> python -m unittest --verbose glsclient.glsclient

################################################################################
### DEPENDENCIES updated 9-Oct-2014
################################################################################
- python 2.7
- postgresql devel tools
- python libraries: requests, psycopg2 and pyxb

sudo yum install zlib-devel bzip2-devel openssl-devel ncurses-devel
sudo yum groupinstall "Development tools"
sudo yum install postgresql93-devel.x86_64

cd /home/mib-cri/software/centos6
wget https://www.python.org/ftp/python/2.7.8/Python-2.7.8.tgz
tar -zxvf Python-2.7.8.tgz
mkdir python2.7
cd Python-2.7.8
./configure --prefix=/home/mib-cri/software/centos6/python2.7
make && make altinstall
cd ..
wget https://bootstrap.pypa.io/get-pip.py
source /home/mib-cri/environment.bashrc.newservers
python get-pip.py
pip install requests
# add /usr/pgsql-9.3/bin/ onto $PATH
pip install psycopg2
pip install pyxb

################################################################################
### Code review meeting - 14-Dec-2012
################################################################################
Anne Pajon <Anne.Pajon@cruk.cam.ac.uk>
Gordon Brown <Gordon.Brown@cruk.cam.ac.uk>
Thomas Carroll <Thomas.Carroll@cruk.cam.ac.uk>
Tim Rayner <Tim.Rayner@cruk.cam.ac.uk>

--------------------------------------------------------------------------------
-- INTRODUCTION
--------------------------------------------------------------------------------
- run pipeline of pipelines from /lustre/mib-cri/solexa/Runs [run_pipelines]
- generate shell script for each step [setup_pipelines]
- synchronise results to archive folder /solexa01/data/Runs
- connect to lims DB using SQLAlchemy
- connect to lims SOAP api using suds

--------------------------------------------------------------------------------
-- COMMENTS/IMPROVEMENTS
--------------------------------------------------------------------------------
- logging
- error handling
- Pipelines class?
- configuration in separate file?

--------------------------------------------------------------------------------
-- DISCUSSION
--------------------------------------------------------------------------------
GenomeSpace http://www.genomespace.org/
MGA - to be run on demux data?

Things to do:
* Use argparse as command line arguments
* Lims/Run classes: reorganise to have only one Run class and create a Lims one
	- Runs are all the same only status is different
	- MultiplexedRuns methods useful to all Runs
	- may need a specific sub-class for MultiplexedRuns
* Create a Pipeline class
* Error handling: use try/except instead of if/then/else to log errors and warnings
* Log: use syslog and logwatch
* Process: fork and always get return code 
* Configuration files: config parser or yaml 
	- default encoded if non site specific 
	- file 
	- own config check
* Documentation: sphinx/docxygen
* Package it up using setup.py and install dependencies - check how to create eggs

Future development: should be database driven instead
